#include "nr3.h"
#include "ludcmp.h"
#include "qrdcmp.h"
#include "utilities.h"
#include <cmath>
#include <iomanip>
#include <iostream>

VecDoub diff(VecDoub x, VecDoub y) {
  VecDoub res = VecDoub(x.size());
  for (int i = 0; i < x.size(); i++) {
    res[i] = x[i] - y[i];
  }
  return res;
}

Doub norm2(VecDoub x) {
  Doub res = 0;
  for (int i = 0; i < x.size(); i++) {
    res += x[i] * x[i];
  }
  return sqrt(res);
}

template <class T>
void lnsrch(VecDoub_I &xold, const Doub fold, VecDoub_I &g, VecDoub_IO &p,
            VecDoub_O &x, Doub &f, const Doub stpmax, Bool &check, T &func) {
  const Doub ALF = 1.0e-4, TOLX = std::numeric_limits<Doub>::epsilon();
  Doub a, alam, alam2 = 0.0, alamin, b, disc, f2 = 0.0;
  Doub rhs1, rhs2, slope = 0.0, sum = 0.0, temp, test, tmplam;
  Int i, n = xold.size();
  check = false;
  for (i = 0; i < n; i++)
    sum += p[i] * p[i];
  sum = sqrt(sum);
  if (sum > stpmax)
    for (i = 0; i < n; i++)
      p[i] *= stpmax / sum;
  for (i = 0; i < n; i++)
    slope += g[i] * p[i];
  if (slope >= 0.0)
    throw("Roundoff problem in lnsrch.");
  test = 0.0;
  for (i = 0; i < n; i++) {
    temp = abs(p[i]) / MAX(abs(xold[i]), 1.0);
    if (temp > test)
      test = temp;
  }
  alamin = TOLX / test;
  alam = 1.0;
  for (;;) {
    for (i = 0; i < n; i++)
      x[i] = xold[i] + alam * p[i];
    f = func(x);
    if (alam < alamin) {
      for (i = 0; i < n; i++)
        x[i] = xold[i];
      check = true;
      return;
    } else if (f <= fold + ALF * alam * slope)
      return;
    else {
      if (alam == 1.0)
        tmplam = -slope / (2.0 * (f - fold - slope));
      else {
        rhs1 = f - fold - alam * slope;
        rhs2 = f2 - fold - alam2 * slope;
        a = (rhs1 / (alam * alam) - rhs2 / (alam2 * alam2)) / (alam - alam2);
        b = (-alam2 * rhs1 / (alam * alam) + alam * rhs2 / (alam2 * alam2)) /
            (alam - alam2);
        if (a == 0.0)
          tmplam = -slope / (2.0 * b);
        else {
          disc = b * b - 3.0 * a * slope;
          if (disc < 0.0)
            tmplam = 0.5 * alam;
          else if (b <= 0.0)
            tmplam = (-b + sqrt(disc)) / (3.0 * a);
          else
            tmplam = -slope / (b + sqrt(disc));
        }
        if (tmplam > 0.5 * alam)
          tmplam = 0.5 * alam;
      }
    }
    alam2 = alam;
    f2 = f;
    alam = MAX(tmplam, 0.1 * alam);
  }
}

template <class T> struct NRfdjac {
  const Doub EPS;
  T &func;

  NRfdjac(T &funcc) : EPS(1.0e-8), func(funcc) {}

  MatDoub operator()(VecDoub_I &x, VecDoub_I &fvec) {
    Int n = x.size();
    MatDoub df(n, n);
    VecDoub xh = x;
    for (Int j = 0; j < n; j++) {
      Doub temp = xh[j];
      Doub h = EPS * abs(temp);
      if (h == 0.0)
        h = EPS;
      xh[j] = temp + h;
      h = xh[j] - temp;
      VecDoub f = func(xh);
      xh[j] = temp;
      for (Int i = 0; i < n; i++)
        df[i][j] = (f[i] - fvec[i]) / h;
    }
    return df;
  }
};

template <class T> struct NRfmin {
  VecDoub fvec;
  T &func;
  Int n;

  NRfmin(T &funcc) : func(funcc) {}

  Doub operator()(VecDoub_I &x) {
    n = x.size();
    Doub sum = 0;
    fvec = func(x);
    for (Int i = 0; i < n; i++)
      sum += SQR(fvec[i]);
    return 0.5 * sum;
  }
};

template <class T> void newt(VecDoub_IO &x, Bool &check, T &vecfunc) {
  std::cout << std::setw(3) << "k" << std::setw(15) << "L0" << std::setw(15)
  << "H" << std::setw(15) << "dx" << std::setw(15) << "c"
  << std::setw(15) << "e" << std::endl;
  const Int MAXITS = 200;
  const Doub TOLF = 1.0e-8, TOLMIN = 1.0e-12, STPMX = 100.0;
  const Doub TOLX = std::numeric_limits<Doub>::epsilon();
  VecDoub dx_old(MAXITS, 1);
  VecDoub dx(MAXITS);
  Int i, j, its, n = x.size();
  Doub den, f, fold, stpmax, sum, temp, test;
  VecDoub g(n), p(n), xold(n);
  MatDoub fjac(n, n);
  NRfmin<T> fmin(vecfunc);
  NRfdjac<T> fdjac(vecfunc);
  VecDoub &fvec = fmin.fvec;
  f = fmin(x);
  test = 0.0;
  for (i = 0; i < n; i++)
    if (abs(fvec[i]) > test)
      test = abs(fvec[i]);
  if (test < 0.01 * TOLF) {
    check = false;
    return;
  }
  sum = 0.0;
  for (i = 0; i < n; i++)
    sum += SQR(x[i]);
  stpmax = STPMX * MAX(sqrt(sum), Doub(n));
  for (its = 0; its < MAXITS; its++) {
    fjac = fdjac(x, fvec);
    for (i = 0; i < n; i++) {
      sum = 0.0;
      for (j = 0; j < n; j++)
        sum += fjac[j][i] * fvec[j];
      g[i] = sum;
    }
    // print her
    VecDoub dx_k = diff(x, xold);

    Doub c = norm2(dx_k) / norm2(dx_old);

    dx_old = dx_k;
    std::cout << std::setw(3) << its + 1 << std::setw(15) << x[0]
              << std::setw(15) << x[7] << std::setw(15) << norm2(diff(x, xold))
              << std::setw(15) << c << std::setw(15) << c * pow(norm2(dx_k), 2)
              << std::endl;

    for (i = 0; i < n; i++)
      xold[i] = x[i];
    fold = f;
    for (i = 0; i < n; i++)
      p[i] = -fvec[i];
    LUdcmp alu(fjac);
    alu.solve(p, p);
    lnsrch(xold, fold, g, p, x, f, stpmax, check, fmin);
    test = 0.0;
    for (i = 0; i < n; i++)
      if (abs(fvec[i]) > test)
        test = abs(fvec[i]);
    if (test < TOLF) {
      check = false;
      return;
    }
    if (check) {
      test = 0.0;
      den = MAX(f, 0.5 * n);
      for (i = 0; i < n; i++) {
        temp = abs(g[i]) * MAX(abs(x[i]), 1.0) / den;
        if (temp > test)
          test = temp;
      }
      check = (test < TOLMIN);
      return;
    }
    test = 0.0;
    for (i = 0; i < n; i++) {
      temp = (abs(x[i] - xold[i])) / MAX(abs(x[i]), 1.0);
      if (temp > test)
        test = temp;
    }
    if (test < TOLX)
      return;
  }

  throw("MAXITS exceeded in newt");
}


VecDoub vecfunc(VecDoub_I G) {
  VecDoub f(8);
  Doub L0 = G[0];
  Doub L = G[1];
  Doub p = G[2];
  Doub x = G[3];
  Doub theta = G[4];
  Doub phi = G[5];
  Doub a = G[6];
  Doub H = G[7];

  Doub v = 120;
  Doub k = 2.5;
  Doub w = 4;
  Doub alpha = 2e-7;

  Doub n = 5;
  Doub d = 30;

  

  f[0] = a*(std::cosh(x/a) -1)-p;
  f[1] = 2*a*std::sinh(x/a)-L;
  f[2] = 2*x+2*k*std::cos(theta)-d;
  f[3] = p+k*std::sin(theta)-n;
  f[4] = std::sinh(x/a)-std::tan(phi);
  f[5] = (1+v/(w*L0))*std::tan(phi)-std::tan(theta);
  f[6] = L0*(1+alpha*H)-L;
  f[7] = w*L0/(2*sin(phi))-H;

  return f;
}

int main() {
  std::cout << "Task 3" << std::endl;
  VecDoub_IO G(8);

  G[0] = 27; //L0
  G[1] = 25; //L
  G[2] = 2; //p
  G[3] = 13; //x
  G[4] = M_PI/3; //theta
  G[5] = M_PI/8; //phi
  G[6] = 40; //a
  G[7] = 100; // H

  Bool check;
  newt(G, check, vecfunc);




  return 0;
}
